// addrspace.cc
//	Routines to manage address spaces (executing user programs).
//
//	In order to run a user program, you must:
//
//	1. link with the -N -T 0 option
//	2. run coff2noff to convert the object file to Nachos format
//		(Nachos object code format is essentially just a simpler
//		version of the UNIX executable object code format)
//	3. load the NOFF file into the Nachos file system
//		(if you haven't implemented the file system yet, you
//		don't need to do this last step)
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "addrspace.h"
#include "noff.h"

#ifdef HOST_SPARC
#include <strings.h>
#endif

//----------------------------------------------------------------------
// SwapHeader
// 	Do little endian to big endian conversion on the bytes in the
//	object file header, in case the file was generated on a little
//	endian machine, and we're now running on a big endian machine.
//----------------------------------------------------------------------

static void
SwapHeader (NoffHeader *noffH)
{
    noffH->noffMagic = WordToHost(noffH->noffMagic);
    noffH->code.size = WordToHost(noffH->code.size);
    noffH->code.virtualAddr = WordToHost(noffH->code.virtualAddr);
    noffH->code.inFileAddr = WordToHost(noffH->code.inFileAddr);
    noffH->initData.size = WordToHost(noffH->initData.size);
    noffH->initData.virtualAddr = WordToHost(noffH->initData.virtualAddr);
    noffH->initData.inFileAddr = WordToHost(noffH->initData.inFileAddr);
    noffH->uninitData.size = WordToHost(noffH->uninitData.size);
    noffH->uninitData.virtualAddr = WordToHost(noffH->uninitData.virtualAddr);
    noffH->uninitData.inFileAddr = WordToHost(noffH->uninitData.inFileAddr);
}

//----------------------------------------------------------------------
// AddrSpace::AddrSpace
// 	Create an address space to run a user program.
//	Load the program from a file "executable", and set everything
//	up so that we can start executing user instructions.
//
//	Assumes that the object code file is in NOFF format.
//
//	First, set up the translation from program memory to physical
//	memory.  For now, this is really simple (1:1), since we are
//	only uniprogramming, and we have a single unsegmented page table
//
//	"executable" is the file containing the object code to load into memory
//----------------------------------------------------------------------

AddrSpace::AddrSpace(OpenFile *executable)
{
    NoffHeader noffH;
    unsigned int i, size;

    executable->ReadAt((char *)&noffH, sizeof(noffH), 0);
    if ((noffH.noffMagic != NOFFMAGIC) &&
            (WordToHost(noffH.noffMagic) == NOFFMAGIC))
        SwapHeader(&noffH);
    ASSERT(noffH.noffMagic == NOFFMAGIC);

// how big is address space?
    size = noffH.code.size + noffH.initData.size + noffH.uninitData.size
           + UserStackSize;	// we need to increase the size
    // to leave room for the stack
    numPages = divRoundUp(size, PageSize);
    size = numPages * PageSize;

    ASSERT(numPages <= NumPhysPages);		// check we're not trying
    // to run anything too big --
    // at least until we have
    // virtual memory

    DEBUG('a', "Initializing address space, num pages %d, size %d\n",
          numPages, size);
// first, set up the translation
    pageTable = new TranslationEntry[numPages];
    for (i = 0; i < numPages; i++) {
        pageTable[i].virtualPage = i;	// for now, virtual page # = phys page #
        pageTable[i].physicalPage = memoryManager->allocFrame();
        bzero(machine->mainMemory + pageTable[i].physicalPage * PageSize, PageSize);
        pageTable[i].valid = TRUE;
        pageTable[i].use = FALSE;
        pageTable[i].dirty = FALSE;
        pageTable[i].readOnly = FALSE;  // if the code segment was entirely on
        // a separate page, we could set its
        // pages to be read-only
    }

// zero out the entire address space, to zero the unitialized data segment
// and the stack segment
    //bzero(machine->mainMemory, size);

// then, copy in the code and data segments into memory
    if (noffH.code.size > 0) {
        DEBUG('a', "Initializing code segment, at 0x%x, size %d\n",
              noffH.code.virtualAddr, noffH.code.size);

            int sizeNeedRead = noffH.code.size;
            char *memAddr = &(machine->mainMemory[Translate(noffH.code.virtualAddr)]);
            int readSize = PageSize - noffH.code.virtualAddr % PageSize;

            DEBUG('c', "Init read size: %i\n", readSize);
            if (sizeNeedRead < readSize) 
                executable->ReadAt(memAddr, noffH.code.size, noffH.code.inFileAddr);
            else {
                executable->ReadAt(memAddr, readSize, noffH.code.inFileAddr);
                for (i = 0; i < readSize; i++)
                DEBUG('c',"VM:%i  PM:%i %x\n", noffH.code.virtualAddr + noffH.code.size - sizeNeedRead + i , Translate(noffH.code.virtualAddr + noffH.code.size - sizeNeedRead) + i, machine->mainMemory[Translate(noffH.code.virtualAddr + noffH.code.size - sizeNeedRead) + i]);
                sizeNeedRead -= readSize;
                while (sizeNeedRead > PageSize) {
                    memAddr = &(machine->mainMemory[Translate(noffH.code.virtualAddr + noffH.code.size - sizeNeedRead)]);
                    executable->ReadAt(memAddr, PageSize, noffH.code.inFileAddr + noffH.code.size - sizeNeedRead);
                    sizeNeedRead -= PageSize;
                    for (i = 0; i < PageSize; i++)
                    DEBUG('c',"VM:%i  PM:%i %x\n", noffH.code.virtualAddr + noffH.code.size - sizeNeedRead + i , Translate(noffH.code.virtualAddr + noffH.code.size - sizeNeedRead) + i, machine->mainMemory[Translate(noffH.code.virtualAddr + noffH.code.size - sizeNeedRead) + i]);
                }
                memAddr = &(machine->mainMemory[Translate(noffH.code.virtualAddr + noffH.code.size - sizeNeedRead)]);
                executable->ReadAt(memAddr, sizeNeedRead, noffH.code.inFileAddr + noffH.code.size - sizeNeedRead);
                for (i = 0; i < sizeNeedRead; i++)
                    DEBUG('c',"VM:%i  PM:%i %x\n", noffH.code.virtualAddr + noffH.code.size - sizeNeedRead + i , Translate(noffH.code.virtualAddr + noffH.initData.size - sizeNeedRead) + i, machine->mainMemory[Translate(noffH.code.virtualAddr + noffH.code.size - sizeNeedRead) + i]);

            }
        
    }
    if (noffH.initData.size > 0) {
        DEBUG('a', "Initializing data segment, at 0x%x, size %d\n",
              noffH.initData.virtualAddr, noffH.initData.size);
        int sizeNeedRead = noffH.initData.size;
        char *memAddr = &(machine->mainMemory[Translate(noffH.initData.virtualAddr)]);
        int readSize = PageSize - noffH.initData.virtualAddr % PageSize;

        
        if (sizeNeedRead < readSize)
            executable->ReadAt(memAddr, noffH.initData.size, noffH.initData.inFileAddr);
        else {
            executable->ReadAt(memAddr, readSize, noffH.initData.inFileAddr);
            for (i = 0; i < readSize; i++)
                DEBUG('c',"VM:%i  PM:%i\n", noffH.initData.virtualAddr + noffH.initData.size - sizeNeedRead + i , Translate(noffH.initData.virtualAddr + noffH.initData.size - sizeNeedRead) + i);
            sizeNeedRead -= readSize;
            while (sizeNeedRead > PageSize) {
                memAddr = &(machine->mainMemory[Translate(noffH.initData.virtualAddr + noffH.initData.size - sizeNeedRead)]);
                executable->ReadAt(memAddr, PageSize, noffH.initData.inFileAddr + noffH.initData.size - sizeNeedRead);
                sizeNeedRead -= PageSize;
                for (i = 0; i < PageSize; i++)
                    DEBUG('c',"VM:%i  PM:%i\n", noffH.initData.virtualAddr + noffH.initData.size - sizeNeedRead + i , Translate(noffH.initData.virtualAddr + noffH.initData.size - sizeNeedRead) + i);
            }

            memAddr = &(machine->mainMemory[Translate(noffH.initData.virtualAddr + noffH.initData.size - sizeNeedRead)]);
            executable->ReadAt(memAddr, sizeNeedRead, noffH.initData.inFileAddr + noffH.initData.size - sizeNeedRead);
            for (i = 0; i < sizeNeedRead; i++)
                    DEBUG('c',"VM:%i  PM:%i\n", noffH.initData.virtualAddr + noffH.initData.size - sizeNeedRead + i , Translate(noffH.initData.virtualAddr + noffH.initData.size - sizeNeedRead) + i);
            //executable->ReadAt(&(machine->mainMemory[Translate(noffH.initData.virtualAddr)]), noffH.initData.size, noffH.initData.inFileAddr);
        }
    }
    pcb = new PCB(processManager->allocPid(), 0);
    DEBUG('b', "allocate: %i\n", pcb->pid);
    processManager->pidPcb->insert(std::pair<int, PCB*>(pcb->pid, pcb));
}

//----------------------------------------------------------------------
// AddrSpace::AddrSpace(AddrSpace& o)
//      Copy an address space to run a user program.
//      Copy the program from the AddrSpace o, and set everything
//      up.
//
//----------------------------------------------------------------------

AddrSpace::AddrSpace(AddrSpace * o)
{
    int i;
    numPages = o->numPages;
    pageTable = new TranslationEntry[numPages];
    for (i = 0; i < numPages; i++) {
        pageTable[i].virtualPage = o->pageTable[i].virtualPage;
        pageTable[i].physicalPage = memoryManager->allocFrame();
        for (int j =0; j < PageSize; j++) {
             machine->mainMemory[pageTable[i].physicalPage * PageSize + j] = machine->mainMemory[o->pageTable[i].physicalPage * PageSize + j];
        }

        pageTable[i].valid = o->pageTable[i].valid;
        pageTable[i].use = o->pageTable[i].use;
        pageTable[i].dirty = o->pageTable[i].dirty;
        pageTable[i].readOnly = o->pageTable[i].readOnly;
    }
    pcb = new PCB(processManager->allocPid(), 0);
    DEBUG('b', "allocate: %i\n", pcb->pid);
    processManager->pidPcb->insert(std::pair<int, PCB*>(pcb->pid, pcb));

}

//----------------------------------------------------------------------
// AddrSpace::~AddrSpace
// 	Dealloate an address space.  Nothing for now!
//----------------------------------------------------------------------

AddrSpace::~AddrSpace()
{
    DEBUG('b', "deallocate: %i\n", pcb->pid);
    processManager->freePid(pcb->pid);
    processManager->pidPcb->erase(pcb->pid);
    delete pcb;
    for (int  i = 0; i < numPages; i++) 
        memoryManager->freeFrame(pageTable[i].physicalPage);
    delete [] pageTable;
}

//----------------------------------------------------------------------
// AddrSpace::InitRegisters
// 	Set the initial values for the user-level register set.
//
// 	We write these directly into the "machine" registers, so
//	that we can immediately jump to user code.  Note that these
//	will be saved/restored into the currentThread->userRegisters
//	when this thread is context switched out.
//----------------------------------------------------------------------

void
AddrSpace::InitRegisters()
{
    int i;

    for (i = 0; i < NumTotalRegs; i++)
        machine->WriteRegister(i, 0);

    // Initial program counter -- must be location of "Start"
    machine->WriteRegister(PCReg, 0);

    // Need to also tell MIPS where next instruction is, because
    // of branch delay possibility
    machine->WriteRegister(NextPCReg, 4);

    // Set the stack register to the end of the address space, where we
    // allocated the stack; but subtract off a bit, to make sure we don't
    // accidentally reference off the end!
    machine->WriteRegister(StackReg, numPages * PageSize - 16);
    DEBUG('a', "Initializing stack register to %d\n", numPages * PageSize - 16);
}

//----------------------------------------------------------------------
// AddrSpace::SaveState
// 	On a context switch, save any machine state, specific
//	to this address space, that needs saving.
//
//	For now, nothing!
//----------------------------------------------------------------------

void AddrSpace::SaveState()
{
    pageTable = machine->pageTable;
    numPages = machine->pageTableSize;
}

//----------------------------------------------------------------------
// AddrSpace::RestoreState
// 	On a context switch, restore the machine state so that
//	this address space can run.
//
//      For now, tell the machine where to find the page table.
//----------------------------------------------------------------------

void AddrSpace::RestoreState()
{
    machine->pageTable = pageTable;
    machine->pageTableSize = numPages;
}

//----------------------------------------------------------------------
// AddrSpace::Translate
//  Convert a virtual address provided by a process into a phsyical
//  memory address.
//----------------------------------------------------------------------

int AddrSpace::Translate(int virtualAddr)
{
    int frame, physicalAddr;
    int page = virtualAddr / PageSize;
    int offset = virtualAddr % PageSize;

    // Make sure this is a valid virtual address
    if (virtualAddr < 0 || page > numPages)
        return -1;

    frame = pageTable[page].physicalPage;
    physicalAddr = frame * PageSize + offset;

    return physicalAddr;
}
